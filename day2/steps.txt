app.jsx
---------
import { useState } from "react"
import ChildComp from "./child"

let App = () => {
    let [power, setPower ] = useState(0);
    let [version, setVersion ] = useState(101);
    let [show, setShow ] = useState(true);
    return <div style={ { border : "2px solid red", padding  : "10px", fontFamily : "sans-serif" } }>
                <h2>App Component</h2>
                <input type="range" onChange={(evt)=> setPower(power = Number(evt.target.value) )} />
                <button className="btn btn-primary" onClick={() => setVersion(Math.round(Math.random() * 500))}>Change Version</button>
                <button className="btn btn-primary" onClick={()=> setShow(!show)}>Show / Hide</button>
                { show && <ChildComp power={power} version={version}/> }
           </div>
}

export default App

XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

child.jsx
---------
import { useEffect } from "react";
import axios from "axios";
import { useState } from "react";

/* 
lifecycle events
----------------
mounting
update
unmounting

useEffect();

*/
let ChildComp = (props) => {
    let [users, setUsers] = useState({data:[]});
   /* */
   // mount
    useEffect(()=>{
       // console.log("Component is mounted")
       axios.get("https://reqres.in/api/users?page=1")
       .then( res => setUsers(res.data) )
       .catch(err => console.log("Error ", err))
    },[]);
    
    // update
    useEffect(()=>{
        console.log("power is updated", Math.random())
    },[props.power]);

    // unmounting
    useEffect(()=>{
        return () =>{
            console.log("Component is un-mounted")
        }
    },[]); 
    

    /* 
    useEffect(()=>{
        console.log("Component is mounted");
        console.log("power is updated", Math.random())
        return () =>{
            console.log("Component is un-mounted")
        }
    },[props.power] ) 
    */

    return <div  style={ { border : "2px solid blue", padding  : "10px", fontFamily : "sans-serif" } }>
            <h3>Child Component</h3>
            <h4>Power {props.power}</h4>
            <h4>Version {props.version}</h4>
            <hr />
            {/* <ul>{users.data?.map(val =>  <li key={val.id}>{ val.first_name }</li> )}</ul> */}
            <table className="table table-hover">
                <thead className="table-dark">
                    <tr>
                        <th>Sl #</th>
                        <th>Full Name</th>
                        <th>eMail</th>
                        <th>Profile Picture</th>
                    </tr>
                </thead>
                <tbody>{ users.data?.map(val => <tr> 
                    <td>{val.id}</td> 
                    <td>{val.first_name+" "+val.last_name}</td> 
                    <td>{val.email}</td> 
                    <td> 
                        <img className="rounded" src={val.avatar} alt={val.first_name} /> 
                    </td> 
                    </tr>)}
                </tbody>
            </table>
           </div>
}

export default ChildComp;
